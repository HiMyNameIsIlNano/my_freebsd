#!/bin/sh

# Begin Functions
__is_installed(){
	if ! [ -x "$(command -v $1)" ]; then
        echo "Error: $1 is not installed." >&2
        return 1
    else
        return 0
	fi
}

__check_requirements(){
	# Check if git is installed
	__is_installed git
	if [ $? -eq 1]
	then
        printf "Do you want to add install git? [Y/n]: "
		read dummy
		if [ "${dummy}" == "Y" ] then
		    __install_ports git
		else
		    exit 1
		fi
	fi
}

read_property(){
	input="$@"
	temp=`cat $config_file | sed 's/\"//g' | grep -w $input | cut -d ":" -f2`
	echo ${temp##*|}
}

__install_ports(){
	ports_to_install="$@"

	# The list of ports must be comma separated with no empty space
	for port in $(echo $ports_to_install | sed "s/,/ /g")
	do
		pkg install -y $port
	done
}

__wait_for_input(){
	printf 'press [ENTER] to continue...'
	read dummy
}

__wait_for_seconds(){
	local seconds="$@"
	echo "waiting ${seconds} seconds before continuing..."
	sleep ${seconds}
}

__is_installed_java(){
	java_version="$@"

	echo "Checking if java is installed..."
	if ! [ -x "$(command -v java)" ]; then
	  echo "Error: $1 is not installed." >&2
	  return 1
    else
		# Check if Java Version is 1.8
		version=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | awk -F. '{printf("%03d%03d",$1,$2);}')
		if [ $version == ${java_version} ] ; then
			return 0
		else
			echo "Java Version ${java_version} is not installed"
			return 1
		fi
	fi
}

__post_config_java8(){
	__is_installed_java 001008

	if [ $? -eq 0 ] ; then
		echo "fdesc	/dev/fd		fdescfs		rw	0	0" >> /etc/fstab
		echo "proc	/proc		procfs		rw	0	0" >> /etc/fstab
	else
		echo "Java Version is not 1.8"
	fi
}
# End Functions

work_dir=.
config_file=${work_dir}/post_install.config

while [ "$1" != "" ]; do
    case $1 in
	    -c | --config )		    shift
                                config_file=$1
                                echo ${config_file}
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

# Check if GIT is installed
__check_requirements

# Variable Declaration
base_ports=$(read_property base_ports)
desktop_ports=$(read_property desktop_ports)
dev_ports=$(read_property dev_ports)
office_ports=$(read_property office_ports)
is_docker_enabled=$(read_property enable_docker)
is_init_ports_enabled=$(read_property init_ports)
is_setup_vpn_enabled=$(read_property setup_vpn)
timestamp=$(date +%s)

echo "Initializing PKG System..."
echo "Updating package DB..."
pkg update

echo "Installing base packages..."
__wait_for_seconds 5
__install_ports $base_ports

echo "Installing desktop packages..."
__wait_for_seconds 5
__install_ports $desktop_ports

echo "Installing office packages..."
__wait_for_seconds 5
__install_ports $office_ports

echo "Installing development packages..."
__wait_for_seconds 5
__install_ports $dev_ports

# Finalize Java8 Configuration
__post_config_java8

if [ "${is_docker_enabled}" == "true" ]
then
	echo "Installing docker packages..."
	__wait_for_seconds 5

	docker_ports=virtualbox-ose-nox11,vagrant,docker-machine,docker
	__install_ports $docker_ports
fi

if [ "${is_setup_vpn_enabled}" == "true" ]
then
	echo "Installing openvpn packages..."
	__wait_for_seconds 5

	openvpn_ports=openvpn,curl,sudo
	__install_ports $openvpn_ports
fi

if [ "${is_init_ports_enabled}" == "true" ]
then
	echo "Initializng ports..."
	__wait_for_seconds 5

	portsnap fetch
	portsnap extract
fi

exit 0
