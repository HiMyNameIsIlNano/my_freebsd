#!/bin/sh

. $(dirname "$0")/scripts/utils

__is_user_allowed_to_update() {
  group=$(id -G -n $USER | grep -o "installer")
  if [ "${group}" == "installer" ]; then
    echo true
  else
    echo false
  fi
}

__is_installed() {
  __log_info "Checking if $1 is installed..."
  if ! [ -x "$(command -v $1)" ]; then
    __log_error "Error: $1 is not installed." >&2
    exit 1
  fi
}

__check_docker_requirements() {
  __log_info "Checking docker Requirements..."
  # Check if docker and vagrant are installed
  __is_installed vagrant
  __is_installed docker-machine
  __is_installed docker
  __is_installed docker-compose
}

__xsession_setup() {
  __log_info "Copying .xinitrc under ${HOME}"
  __backup_file ${HOME}/.xinitrc
  echo 'exec openbox-session' >>${HOME}/.xinitrc

  __log_info "Copying .Xdefaults under ${HOME}"
  __backup_file ${HOME}/.Xdefaults
  cp ./dotfiles/Xdefaults ${HOME}/.Xdefaults
}

__shell_setup() {
  __log_info "Copying .tcshrc under ${HOME}"
  __backup_file ${HOME}/.tcshrc
  cp ./dotfiles/tcshrc ${HOME}/.tcshrc
}

__task_bar_setup() {
  __log_info "Copying tint2rc under ${HOME}/.config/tint2"
  mkdir -p ${HOME}/.config/tint2
  __backup_file ${HOME}/.config/tint2
  cp ./openbox/tint2rc ${HOME}/.config/tint2/tint2rc
}

__conky_setup() {
  __log_info "Copying Conky Configuration Files under ${HOME}..."
  __backup_file ${HOME}/.conkyrc
  cp ./dotfiles/conkyrc ${HOME}/.conkyrc
}

__gtk_theme_setup() {
  __log_info "Copying gtk2/gtk3 Configuration Files under ${HOME}..."
  __backup_file ${HOME}/.gtkrc-2.0
  cp ./dotfiles/gtkrc-2.0 ${HOME}/.gtkrc-2.0

  __log_info "Copying settings.ini Configuration Files under ${HOME}/.config/gtk-3.0..."
  mkdir -p ${HOME}/.config/gtk-3.0
  __backup_file ${HOME}/.config/gtk-3.0/settings.ini
  cp ./dotfiles/settings.ini ${HOME}/.config/gtk-3.0/settings.ini
}

__openbox_setup() {
  mkdir -p ${HOME}/.config/openbox

  __log_info "Copying autostart.sh under ${HOME}/.config/openbox"
  __backup_file ${HOME}/.config/openbox/autostart.sh
  cp ./openbox/autostart ${HOME}/.config/openbox/autostart.sh
  chmod 744 ${HOME}/.config/openbox/autostart.sh

  __log_info "Copying rc.xml under ${HOME}/.config/openbox"
  __backup_file ${HOME}/.config/openbox/rc.xml
  cp ./openbox/rc.xml ${HOME}/.config/openbox/rc.xml

  __log_info "Copying menu.xml under ${HOME}/.config/openbox"
  __backup_file ${HOME}/.config/openbox/menu.xml
  cp ./openbox/menu.xml ${HOME}/.config/openbox/menu.xml

  __log_info "Copying Openbox Desktop Wallpapers under ${HOME}/.config/openbox/wallpapers..."
  mkdir -p ${HOME}/.config/openbox/wallpapers
  __wait_for_seconds 5
  cp ./wallpapers/*-background.jpg ${HOME}/.config/openbox/wallpapers/

  mkdir -p ${HOME}/.themes/Myfreebsd-Adapta/openbox-3
  __log_info "Copying themerc under ${HOME}/.themes/Myfreebsd-Adapta/openbox-3"
  __backup_file ${HOME}/.themes/Myfreebsd-Adapta/openbox-3/themerc
  patch -i ./openbox/themerc.diff /usr/local/share/themes/Adapta/openbox-3/themerc -o ${HOME}/.themes/Myfreebsd-Adapta/openbox-3/themerc
}

__geany_setup() {
  mkdir -p ${HOME}/.config/geany

  __log_info "Installing geany themes..."
  __wait_for_seconds 5

  fetch --no-verify-hostname --no-verify-peer -o /tmp/geany_themes.tar.gz https://api.github.com/repos/geany/geany-themes/tarball/master
  mkdir /tmp/geany_themes_${timestamp}
  tar xvzf /tmp/geany_themes.tar.gz --strip=1 -C /tmp/geany_themes_${timestamp}

  mkdir -p ${HOME}/.config/geany/colorschemes/
  cp -r /tmp/geany_themes_${timestamp}/colorschemes/ ${HOME}/.config/geany/colorschemes/
  rm -rf /tmp/geany_themes_${timestamp}
}

__docker_setup() {
  if [ "${is_docker_enabled}" == "false" ]; then
    return
  fi

  __check_docker_requirements
  mkdir -p ${HOME}/.local/scripts

  __log_info "Configuring docker..."
  __wait_for_seconds 5
  mkdir -p ${HOME}/Development/Vagrant/dockervm
  cp ./openbox/Vagrantfile ${HOME}/Development/Vagrant/dockervm/Vagrantfile

  # Do not use this in production. This is just fine for local development
  docker-machine create \
    --driver generic \
    --generic-ip-address 127.0.0.1 \
    --generic-ssh-port 2222 \
    --generic-ssh-user docker \
    --generic-ssh-key ~/.vagrant.d/insecure_private_key \
    boot2docker-vbox
}

__setup_user_update_script() {
  if [ "${user_can_update}" == "true" ]; then
    __log_info "Installing Update Scripts under ${HOME}/.local/scripts..."
    __wait_for_seconds 5

    fetch --no-verify-hostname --no-verify-peer -o /tmp/update_script.tar.gz https://api.github.com/repos/HiMyNameIsIlNano/update_script/tarball/master
    mkdir /tmp/update_script_${timestamp}
    tar xvzf /tmp/update_script.tar.gz --strip=1 -C /tmp/update_script_${timestamp}

    cd /tmp/update_script_${timestamp}
    sh install
    __log_info "Cleaning Temporary Files..."
    cd
    rm -rf /tmp/update_script_${timestamp}
  else
    __log_warn "Skipping Copying Update Scripts under ${HOME}/.local/scripts as ${USER} is not member of the group installer..."
  fi
}

# TODO: if pcmanfm copy /usr/local/share/applications/mimeinfo.cache under ${HOME}/local/share/applications/mimeinfo.cache
__pcmanfm_setup() {
  # PCmanFM: Add open terminal feature
  mkdir -p ~/.local/share/file-manager/actions/
  mkdir -p ${HOME}/.local/scripts/

  __log_info "Copying terminal.desktop under ${HOME}/.local/share/file-manager/actions/"
  __backup_file ${HOME}/.local/share/file-manager/actions/terminal.desktop
  cp ./openbox/terminal.desktop ${HOME}/.local/share/file-manager/actions/terminal.desktop

  __log_info "Copying extract under ${HOME}/.local/scripts/"
  __backup_file ${HOME}/.local/scripts/extract
  cp ./openbox/extract ${HOME}/.local/scripts/extract
}

work_dir=.
config_file=${work_dir}/openbox_configurer.config

# Make sure the init is run once
if [ -f ~/.config/openbox/init.finished ]; then
  exit 0
fi

while [ "$1" != "" ]; do
  case $1 in
  -c | --config)
    shift
    config_file=$1
    echo ${config_file}
    ;;
  -h | --help)
    usage
    exit
    ;;
  *)
    usage
    exit 1
    ;;
  esac
  shift
done

# Variable Declaration
user_can_update=$(__is_user_allowed_to_update)
is_docker_enabled=$(__read_property enable_docker)
is_setup_vpn_enabled=$(__read_property setup_vpn)
geany_tag_base_url=http://download.geany.org/contrib/tags
timestamp=$(date +%s)

__log_info "Start configuring Openbox Desktop Look & Feel..."

__pcmanfm_setup

__xsession_setup

__shell_setup

__shell_prompt_setup

__openbox_setup

__task_bar_setup

__conky_setup

__gtk_theme_setup

__geany_setup

__docker_setup

__setup_user_update_script

cat $timestamp >~/.config/openbox/init.finished

exit 0
