#!/bin/sh

# Begin Functions
__read_property(){
	input="$@"
	temp=`cat $config_file | sed 's/\"//g' | grep -w $input | cut -d ":" -f2`
	echo ${temp##*|}
}

__wait_for_input(){
	printf 'press [ENTER] to continue...'
	read dummy
}

__wait_for_seconds(){
	local seconds="$@"
	echo "waiting ${seconds} seconds before continuing..."
	sleep ${seconds}
}

__add_user_to_group(){
	local group="$@"
	local user
	local dummy=Y
	
	while
		printf "Which user would you like to add to group ${group}?: "
		read user
	
		echo "Adding user ${user} to group ${group}..."
		pw group mod ${group} -m ${user}	
		
		printf "Do you want to add another user to group ${group}? [Y/n]: "
		read dummy
		[[ "${dummy}" == "Y" ]]            # test the limit of the loop.
	do :;  done	
}
# End Functions

work_dir=.
config_file=${work_dir}/post_install.config

while [[ "$1" != "" ]]; do
    case $1 in
	    -c | --config )		    shift
                                config_file=$1
                                echo ${config_file}
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

# Variable Declaration
is_init_ports_enabled=$(__read_property init_ports)
is_create_users_enabled=$(__read_property create_users)
port_system=$(__read_property port_system)
download_kernel=$(__read_property download_kernel)
timestamp=$(date +%s)

# Groups
echo "Adding 'restarter', 'installer' and 'vpnstarter' groups..."	
__wait_for_seconds 5
pw groupadd restarter
pw groupadd installer
pw groupadd vpnstarter

# Users
echo "Adding users..."	
__wait_for_seconds 5

if [[ "${is_create_users_enabled}" == "true" ]]
then
	echo "Initializing users..."
	__wait_for_seconds 5
	adduser	
fi

if [[ "${download_kernel}" == "true" ]]
then
	echo "Downloading kernel source..."
	if [[ -d /usr/src ]]
	then
	    # backup folder
	    mv /usr/src /usr/src_${timestamp}
	fi
	sh ./download_kernel
fi

if [[ ${port_system} == "PKG" ]]
then
	sh ./pkg_init
fi

if [[ ${port_system} == "PORT" ]]
then
	sh ./port_init
fi

# Sudoers
echo "Configuring sudoers..."
__wait_for_seconds 5
echo '' >> /usr/local/etc/sudoers
echo '## BEGIN OF MY RULES ##' >> /usr/local/etc/sudoers
echo '' >> /usr/local/etc/sudoers
echo '## Members of the group restarter can run shutdown and acpiconf without a password.' >> /usr/local/etc/sudoers
echo '%restarter ALL=(ALL) NOPASSWD: /sbin/shutdown,/usr/sbin/acpiconf' >> /usr/local/etc/sudoers
echo '' >> /usr/local/etc/sudoers
echo '## Members of the Group installer can run pkg' >> /usr/local/etc/sudoers
echo '%installer ALL=(ALL) PASSWD: /usr/sbin/pkg' >> /usr/local/etc/sudoers
echo '' >> /usr/local/etc/sudoers
echo '## Members of the Group vpnstarter can run openvpn' >> /usr/local/etc/sudoers
echo '%vpnstarter ALL=(ALL) PASSWD: /usr/local/sbin/openvpn' >> /usr/local/etc/sudoers
echo '' >> /usr/local/etc/sudoers
echo '## END OF MY RULES ##' >> /usr/local/etc/sudoers

echo "Configuring startup daemons and boot options..."
__wait_for_seconds 5

# Move to the checkout directory
cd ${work_dir}

# rc.conf
if [[ -f "/etc/rc.conf" ]]
then
	echo "Backing-up rc.conf"
	cp /etc/rc.conf /etc/rc.conf.${timestamp}.bak
else
	echo "Nothing to backup. File rc.conf does not exist"
fi
cat ./Freebsd/rc.conf.delta >> /etc/rc.conf

# pf.conf
if [[ -f "/etc/pf.conf" ]]
then
	echo "Backing-up pf.conf"
	cp /etc/pf.conf /etc/pf.conf.${timestamp}.bak
else
	echo "Nothing to backup. File pf.conf does not exist"
fi
cp ./Freebsd/pf.conf /etc/pf.conf

# Localrules
echo '[localrules=5]' >> /etc/devfs.rules
echo "add path 'da*' mode 0660 group operator" >> /etc/devfs.rules 
echo 'devfs_system_ruleset="localrules"' >> /etc/rc.conf
echo 'vfs.usermount=1' >> /etc/sysctl.conf

# loader.conf
if [[ -f "/boot/loader.conf" ]]
then
	echo "Backing-up loader.conf"
	mv /boot/loader.conf /boot/loader.conf.${timestamp}.bak
else
	echo "Nothing to backup. File loader.conf does not exist"
fi
cp ./Freebsd/loader.conf /boot/loader.conf

echo "### IMPORTANT NOTE ###"
echo "Make sure that all the users are part of the 'video' group, otherwise it won't be possible for the user(s) to start a graphic session"
__add_user_to_group video

echo "Make sure that all the users are part of the 'operator' group, otherwise it won't be possible for the user(s) to automount USB sticks"
__add_user_to_group operator

echo "Add members to the 'vboxusers' group, otherwise it won't be possible for anyone to launch virtualbox"
__add_user_to_group vboxusers

echo "Add members to the 'restarter' group, otherwise it won't be possible for anyone to restart or power down the computer"
__add_user_to_group restarter

echo "Add members to the 'installer' group, otherwise it won't be possible for anyone to install programs apart from the root user"
__add_user_to_group installer

echo "Make sure that all the users are part of the 'vpnstarter' group, otherwise it won't be possible for the user(s) to launch openvpn"
__add_user_to_group vpnstarter

echo "### Restart computer now... ###"
__wait_for_input
shutdown -r now

exit 0
