#!/bin/sh

is_installed(){
	if ! [ -x "$(command -v $1)" ]; then
	  echo 'Error: $1 is not installed.' >&2
	  exit 1
	fi
}

check_requirements(){
	# Check if git is installed
	is_installed git
}

read_property(){
	input="$@"
	temp=`cat $config_file | sed 's/\"//g' | grep -w $input | cut -d ":" -f2`
	echo ${temp##*|}
}

install_ports(){
	ports_to_install="$@"
	
	# The list of ports must be comma separated with no empty space
	for port in $(echo $ports_to_install | sed "s/,/ /g")
	do
		pkg install $port
	done	
}

wait_for_input(){
	printf 'press [ENTER] to continue'
	read dummy
}

work_dir=.
config_file=${work_dir}/post_install.config

while [ "$1" != "" ]; do
    case $1 in
	-c | --config )		shift
                                config_file=$1
                                echo $config_file
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

# Check if GIT is istalled
check_requiremnts

# Variable Declaration
base_ports=$(read_property base_ports)
desktop_ports=$(read_property desktop_ports)
dev_ports=$(read_property dev_ports)
is_docker_enabled=$(read_property enable_docker)
is_init_ports_enabled=$(read_property init_ports)
is_create_users_enabled=$(read_property create_users)
is_setup_vpn_enabled=$(read_property setup_vpn)
timestamp=$(date +%s)

pkg update
wait_for_input

echo "Installing base packages..."
wait_for_input
install_ports $base_ports

echo "Installing desktop packages..."
wait_for_input
install_ports $desktop_ports

echo "Installing development packages..."
wait_for_input
install_ports $dev_ports
 
if [ "${is_docker_enabled}" == "true" ]
then
	echo "Installing docker packages..."
	wait_for_input
		
	docker_ports=virtualbox-ose,vagrant,docker-machine,docker
	install_ports $docker_ports
fi

if [ "${is_setup_vpn_enabled}" == "true" ]
then
	echo "Installing openvpn packages..."
	wait_for_input
		
	openvpn_ports=openvpn,curl,sudo,tesseract,ImageMagick7-nox11
	install_ports $openvpn_ports	
fi

if [ "${is_init_ports_enabled}" == "true" ]
then
	echo "Initializng ports..."
	wait_for_input
	
	portsnap fetch
	portsnap extract	
fi

# Groups
echo "Adding 'restarter' and 'installer' groups..."	
wait_for_input
pw groupadd restarter
pw groupadd installer
pw groupadd vpnstarter

# Users
echo "Adding users..."	
wait_for_input

if [ "${is_create_users_enabled}" == "true" ]
then
	echo "Initializng users..."
	wait_for_input
	adduser	
fi


# Sudoers
echo "Configuring sudoers..."
wait_for_input
echo '' >> /usr/local/etc/sudoers
echo '## BEGIN OF MY RULES ##' >> /usr/local/etc/sudoers
echo '' >> /usr/local/etc/sudoers
echo '## Members of the group restarter can run shutdown and acpiconf without a password.' >> /usr/local/etc/sudoers
echo '%restarter ALL=(ALL) NOPASSWD: /sbin/shutdown,/usr/sbin/acpiconf' >> /usr/local/etc/sudoers
echo '' >> /usr/local/etc/sudoers
echo '## Members of the Group installer can run pkg' >> /usr/local/etc/sudoers
echo '%installer ALL=(ALL) PASSWD: /usr/sbin/pkg' >> /usr/local/etc/sudoers
echo '' >> /usr/local/etc/sudoers
echo '## Members of the Group vpnstarter can run openvpn' >> /usr/local/etc/sudoers
echo '%installer ALL=(ALL) PASSWD: /usr/local/sbin/openvpn' >> /usr/local/etc/sudoers
echo '' >> /usr/local/etc/sudoers
echo '## END OF MY RULES ##' >> /usr/local/etc/sudoers

echo "Configuring startup demons and boot options..."
wait_for_input

# Move to the checkout directory
cd $work_dir

# Localrules
# Nothing to do

# rc.conf
if [ -f "/etc/rc.conf" ] 
then
	echo "Backing-up rc.conf"
	mv /etc/rc.conf /etc/rc.conf.${timestamp}.bak
else
	echo "Nothing to backup. File rc.conf does not exist"
fi
cp ./rc.conf /etc/rc.conf

# loader.conf
if [ -f "/boot/loader.conf" ] 
then
	echo "Backing-up loader.conf"
	mv /boot/loader.conf /boot/loader.conf.${timestamp}.bak
else
	echo "Nothing to backup. File loader.conf does not exist"
fi
cp ./loader.conf /boot/loader.conf

exit 0
