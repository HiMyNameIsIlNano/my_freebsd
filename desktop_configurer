#!/bin/sh

read_property(){
	input="$@"
	temp=`cat $config_file | sed 's/\"//g' | grep -w $input | cut -d ":" -f2`
	echo ${temp##*|}
}

wait_for_input(){
	printf 'press [ENTER] to continue'
	read dummy
}

wait_for_seconds(){
	local seconds="$@"
	echo "waiting ${seconds} seconds before continuing..."
	sleep ${seconds}
}

is_user_allowed_to_update(){
	group=$(id -G -n $USER | grep -o "installer")
	if [ "${group}" == "installer" ]; then
		echo true
	else
		echo false
	fi
}

is_installed(){
	echo "Checking if $1 is installed..."
	if ! [ -x "$(command -v $1)" ]; then
	  echo "Error: $1 is not installed." >&2
	  exit 1
	fi
}

check_requiremnts(){
	echo "Checking general Requirements..."
	# Check if git is installed
	is_installed git
}

check_docker_requirements(){
	echo "Checking docker Requirements..."
	# Check if docker, virtualbox, vagrant are installed
	# TODO: Check if this is not necessary anymore as moved to virtualbox-ose-nox11
	# is_installed virtualbox
	is_installed vagrant
	is_installed docker-machine
}

work_dir=.
config_file=${work_dir}/post_install.config

# Check if git is istalled
check_requiremnts

# Variable Declaration
is_user_allowed_to_update=$(is_user_allowed_to_update)
is_docker_enabled=$(read_property enable_docker)
is_setup_vpn_enabled=$(read_property setup_vpn)
geany_tag_base_url=http://download.geany.org/contrib/tags
geany_java_tag_version=openjdk8-8u66-b01.java.tags
timestamp=$(date +%s)

mkdir -p $HOME/.local/scripts
mkdir -p $HOME/.config/openbox/Wallpapers
mkdir -p $HOME/.config/gtk-3.0
mkdir -p $HOME/.themes
mkdir -p $HOME/.icons
mkdir -p $HOME/.config/tint2
mkdir -p $HOME/.config/geany

echo "Start configuring Openbox Desktop Look & Feel..."
echo "Copying .xinitrc under $HOME"
wait_for_seconds 5
# .xinitrc
if [ -f "$HOME/.xinitrc" ] 
then
	echo "Backing-up .xinitrc"
	mv $HOME/.xinitrc $HOME/.xinitrc.${timestamp}.bak 
else
	echo "Nothing to backup. File .xinitrc does not exist"
fi
echo 'exec openbox-session' >> $HOME/.xinitrc

echo "Copying .tcshrc under $HOME"
wait_for_seconds 5
# tcshrc
if [ -f "$HOME/.tcshrc" ] 
then
	echo "Backing-up .tcshrc"
	mv $HOME/.tcshrc $HOME/.tcshrc.${timestamp}.bak 
else
	echo "Nothing to backup. File .tcshrc does not exist"
fi
cp ./Openbox/tcshrc $HOME/.tcshrc

echo "Copying .Xdefaults under $HOME"
wait_for_seconds 5
# Xdefaults
if [ -f "$HOME/.Xdefaults" ] 
then
	echo "Backing-up .Xdefaults"
	mv $HOME/.Xdefaults $HOME/.Xdefaults.${timestamp}.bak 
else
	echo "Nothing to backup. File .Xdefaults does not exist"
fi
cp ./Openbox/Xdefaults $HOME/.Xdefaults

echo "Copying autostart.sh under $HOME/.config/openbox"
wait_for_seconds 5
# Openbox
if [ -f "$HOME/.config/openbox/autostart.sh" ] 
then
	echo "Backing-up autostart.sh"
	mv $HOME/.config/openbox/autostart.sh $HOME/.config/openbox/autostart.sh.${timestamp}.bak 
else
	echo "Nothing to backup. File autostart.sh does not exist"
fi
cp ./Openbox/autostart $HOME/.config/openbox/autostart.sh
chmod 744 $HOME/.config/openbox/autostart.sh

echo "Copying rc.xml under $HOME/.config/openbox"
wait_for_seconds 5
if [ -f "$HOME/.config/openbox/rc.xml" ] 
then
	echo "Backing-up rc.xml"
	mv $HOME/.config/openbox/rc.xml $HOME/.config/openbox/rc.xml.${timestamp}.bak 
else
	echo "Nothing to backup. File rc.xml does not exist"
fi
cp ./Openbox/rc.xml $HOME/.config/openbox/rc.xml

echo "Copying menu.xml under $HOME/.config/openbox"
wait_for_seconds 5
if [ -f "$HOME/.config/openbox/menu.xml" ] 
then
	echo "Backing-up menu.xml"
	mv $HOME/.config/openbox/menu.xml $HOME/.config/openbox/menu.xml.${timestamp}.bak 
else
	echo "Nothing to backup. File rc.xml does not exist"
fi
cp ./Openbox/menu.xml $HOME/.config/openbox/menu.xml

echo "Copying Openbox Desktop Wallpapers under $HOME/.config/openbox/Wallpapers..."
wait_for_seconds 5
# Wallpaper
cp ./Wallpapers/*-background.jpg $HOME/.config/openbox/Wallpapers/

echo "Copying tint2rc under HOME/.config/tint2"
wait_for_seconds 5
# tint2
if [ -f "$HOME/.config/tint2/tint2rc" ] 
then
	echo "Backing-up tint2rc"
	mv $HOME/.config/tint2/tint2rc $HOME/.config/tint2/tint2rc.${timestamp}.bak
else
	echo "Nothing to backup. File tint2rc does not exist"
fi
cp ./Openbox/tint2rc $HOME/.config/tint2/tint2rc

echo "Copying Conky Configuration Files under $HOME..."
wait_for_seconds 5
# conky
if [ -f "$HOME/.conkyrc" ] 
then
	echo "Backing-up .conkyrc"
	mv $HOME/.conkyrc $HOME/.conkyrc.${timestamp}.bak 
else
	echo "Nothing to backup. File .conkyrc does not exist"
fi
cp ./Openbox/conkyrc $HOME/.conkyrc


echo "Copying gtk2/gtk3 Configuration Files under $HOME..."
wait_for_seconds 5
# GTK2 Themes and Icons
if [ -f "$HOME/.gtkrc-2.0" ] 
then
	echo "Backing-up .gtkrc-2.0"
	mv $HOME/.gtkrc-2.0 $HOME/.gtkrc-2.0.${timestamp}.bak 
else
	echo "Nothing to backup. File .gtk2rc does not exist"
fi
cp ./Openbox/gtkrc-2.0 $HOME/.gtkrc-2.0
cp ./Openbox/my-siva-flat-dark-borderless.tar.gz $HOME/.themes/my-siva-flat-dark-borderless.tar.gz
tar xzf $HOME/.themes/my-siva-flat-dark-borderless.tar.gz -C $HOME/.themes

echo "Copying settings.ini Configuration Files under $HOME/.config/gtk-3.0..."
wait_for_seconds 5
# GTK3 Themes and Icons
if [ -f "$HOME/.config/gtk-3.0/settings.ini" ] 
then
	echo "Backing-up settings.ini"
	mv $HOME/.config/gtk-3.0/settings.ini $HOME/.config/gtk-3.0/settings.${timestamp}.ini
else 
	echo "Nothing to backup. File settings.ini does not exist"
fi
cp ./Openbox/settings.ini $HOME/.config/gtk-3.0/settings.ini

echo "Copying Icon Pack Files under $HOME/.icons..."
wait_for_seconds 5
# Icon Pack
cp ./Openbox/ultra-flat-icons-orange.tar.gz $HOME/.icons/ultra-flat-icons-orange.tar.gz
tar xzf $HOME/.icons/ultra-flat-icons-orange.tar.gz -C $HOME/.icons/

# Geany Themes
if [ -d "$HOME/.config/geany" ] 
then
	echo "Installing geany themes..."
	wait_for_seconds 5
		
	git clone https://github.com/geany/geany-themes.git /tmp/geany_themes_${timestamp}
	mkdir -p $HOME/.config/geany/colorschemes/
	cp -r /tmp/geany_themes_${timestamp}/colorschemes/ $HOME/.config/geany/colorschemes/
	rm -rf /tmp/geany_themes_${timestamp}
	
	mkdir -p $HOME/.config/geany/tags/ 
	curl ${geany_tag_base_url}/${geany_java_tag_version} -o $HOME/.config/geany/tags/${geany_java_tag_version}
fi

if [ "${is_docker_enabled}" == "true" ]
then
	check_docker_requirements
		
	echo "Installing docker configuration..."
	wait_for_seconds 5
	mkdir -p $HOME/Development/Vagrant/dockervm
	cp Vagrantfile $HOME/Development/Vagrant/dockervm/Vagrantfile
	
	echo "Installing docker shortcuts..."
	wait_for_seconds 5
	mkdir -p $HOME/.local/scripts
	cp ./docker_up $HOME/.local/scripts/docker_up
	cp ./docker_down $HOME/.local/scripts/docker_down
fi

if [ "${is_setup_vpn_enabled}" == "true" ]
then
	echo "Installing openvpn scripts..."
	wait_for_seconds 5
		
	git clone https://github.com/HiMyNameIsIlNano/vpnbook.git /tmp/vpnbook_${timestamp}
	cd /tmp/vpnbook_${timestamp}
	sh install
	
	cmd="(sleep 20 && /home/Developer/.local/scripts/vpnbook_wrapper -s US1) &"
	if [ -d "${HOME}/.config/openbox" ]; then  
	if grep -Fxq "${cmd}" ${HOME}/.config/openbox/autostart.sh
		then
			echo "No need to add vpnbook to autostart.sh as it is already present"
		else
			echo ${cmd} >> ${HOME}/.config/openbox/autostart.sh
		fi
	fi
	echo "Cleaning Temporary Files..."
	cd
	rm -rf /tmp/vpnbook_${timestamp}
fi

if [ "${is_user_allowed_to_update}" == "true" ]; then
	# Install Update Script
	echo "Installing Update Scripts under $HOME/.local/scripts..."
	wait_for_seconds 5
	
	git clone https://github.com/HiMyNameIsIlNano/update_script.git /tmp/update_script_${timestamp}
	cd /tmp/update_script_${timestamp}
	sh install
	echo "Cleaning Temporary Files..."
	cd
	rm -rf /tmp/update_script_${timestamp}
else
	echo "Skipping Copying Update Scripts under $HOME/.local/scripts as ${USER} is not memeber of the group installer..."
fi	
		
exit 0
