#!/bin/sh

__read_property(){
	input="$@"
	temp=`cat $config_file | sed 's/\"//g' | grep -w $input | cut -d ":" -f2`
	echo ${temp##*|}
}

__wait_for_input(){
	printf 'press [ENTER] to continue'
	read dummy
}

__backup_file() {
  local file="$@"
  __wait_for_seconds 5

  if [ -f "${file}" ]
  then
    echo "Backing-up ${file}"
    mv ${file} ${file}.${timestamp}.bak
  else
    echo "Nothing to backup. File ${file} does not exist"
  fi
}

__wait_for_seconds(){
	local seconds="$@"
	echo "waiting ${seconds} seconds before continuing..."
	sleep ${seconds}
}

__is_user_allowed_to_update(){
	group=$(id -G -n $USER | grep -o "installer")
	if [ "${group}" == "installer" ]; then
		echo true
	else
		echo false
	fi
}

__is_installed(){
	echo "Checking if $1 is installed..."
	if ! [ -x "$(command -v $1)" ]; then
	  echo "Error: $1 is not installed." >&2
	  exit 1
	fi
}

__check_docker_requirements(){
	echo "Checking docker Requirements..."
	# Check if docker and vagrant are installed
	__is_installed vagrant
	__is_installed docker-machine
}

__xsession_setup(){
  echo "Copying .xinitrc under ${HOME}"
  __backup_file ${HOME}/.xinitrc
  echo 'exec openbox-session' >> ${HOME}/.xinitrc

  echo "Copying .Xdefaults under ${HOME}"
  __backup_file ${HOME}/.Xdefaults
  cp ./dotfiles/Xdefaults ${HOME}/.Xdefaults
}

__shell_setup(){
  echo "Copying .tcshrc under ${HOME}"
  __backup_file ${HOME}/.tcshrc
  cp ./dotfiles/tcshrc ${HOME}/.tcshrc
}

__shell_prompt_setup(){
  echo "Copying powershell config.json under ${HOME}/.config/powerline-shell"
  mkdir -p ${HOME}/.config//powerline-shell
    __backup_file ${HOME}/.config/powerline-shell/config.json
  cp ./openbox/config.json ${HOME}/.config/powerline-shell/config.json
}

__task_bar_setup(){
  echo "Copying tint2rc under ${HOME}/.config/tint2"
  mkdir -p ${HOME}/.config/tint2
  __backup_file ${HOME}/.config/tint2
  cp ./openbox/tint2rc ${HOME}/.config/tint2/tint2rc
}

__conky_setup(){
  echo "Copying Conky Configuration Files under ${HOME}..."
  __backup_file ${HOME}/.conkyrc
  cp ./dotfiles/conkyrc ${HOME}/.conkyrc
}

__download_icons_theme(){
  echo "Copying Icon Pack Files under ${HOME}/.icons..."
  mkdir -p ${HOME}/.icons
  __wait_for_seconds 5
  # Icon Pack
  fetch --no-verify-hostname --no-verify-peer -o /tmp/icons.tar.gz https://api.github.com/repos/thiagolucio/Super-Ultra-Flat-Numix-Remix/tarball/master
  tar xvzf /tmp/icons.tar.gz --strip=1 -C ${HOME}/.icons/
}

__gtk_theme_setup(){
  echo "Copying gtk2/gtk3 Configuration Files under ${HOME}..."
  __backup_file ${HOME}/.gtkrc-2.0
  cp ./dotfiles/gtkrc-2.0 ${HOME}/.gtkrc-2.0

  echo "Copying settings.ini Configuration Files under ${HOME}/.config/gtk-3.0..."
  mkdir -p ${HOME}/.config/gtk-3.0
  __backup_file ${HOME}/.config/gtk-3.0/settings.ini
  cp ./dotfiles/settings.ini ${HOME}/.config/gtk-3.0/settings.ini
}

__openbox_setup(){
  echo "Copying autostart.sh under ${HOME}/.config/openbox"
  __backup_file ${HOME}/.config/openbox/autostart.sh
  cp ./openbox/autostart ${HOME}/.config/openbox/autostart.sh
  chmod 744 ${HOME}/.config/openbox/autostart.sh

  mkdir -p ${HOME}/.themes/Myfreebsd-Adapta/openbox-3
  echo "Copying themerc under ${HOME}/.themes/Myfreebsd-Adapta/openbox-3"
  __backup_file ${HOME}/.themes/Myfreebsd-Adapta/openbox-3/themerc
  patch -i ./openbox/themerc.diff /usr/local/share/themes/Adapta/openbox-3/themerc -o ${HOME}/.themes/Myfreebsd-Adapta/openbox-3/themerc

  echo "Copying rc.xml under ${HOME}/.config/openbox"
  __backup_file ${HOME}/.config/openbox/rc.xml
  cp ./openbox/rc.xml ${HOME}/.config/openbox/rc.xml

  echo "Copying menu.xml under ${HOME}/.config/openbox"
  __backup_file ${HOME}/.config/openbox/menu.xml
  cp ./openbox/menu.xml ${HOME}/.config/openbox/menu.xml

  echo "Copying Openbox Desktop Wallpapers under ${HOME}/.config/openbox/wallpapers..."
  mkdir -p ${HOME}/.config/openbox/wallpapers
  __wait_for_seconds 5
  cp ./wallpapers/*-background.jpg ${HOME}/.config/openbox/wallpapers/
}

__geany_setup(){
  mkdir -p ${HOME}/.config/geany

  echo "Installing geany themes..."
  __wait_for_seconds 5

  fetch --no-verify-hostname --no-verify-peer -o /tmp/geany_themes.tar.gz https://api.github.com/repos/geany/geany-themes/tarball/master
  mkdir /tmp/geany_themes_${timestamp}
  tar xvzf /tmp/geany_themes.tar.gz --strip=1 -C /tmp/geany_themes_${timestamp}

  mkdir -p ${HOME}/.config/geany/colorschemes/
  cp -r /tmp/geany_themes_${timestamp}/colorschemes/ ${HOME}/.config/geany/colorschemes/
  rm -rf /tmp/geany_themes_${timestamp}

  mkdir -p ${HOME}/.config/geany/tags/
  curl ${geany_tag_base_url}/${geany_java_tag_version} -o ${HOME}/.config/geany/tags/${geany_java_tag_version}
}

__docker_setup(){
  if [ "${is_docker_enabled}" == "false" ]
  then
    return
  fi

  __check_docker_requirements
  mkdir -p ${HOME}/.local/scripts

  echo "Installing docker configuration..."
  __wait_for_seconds 5
  mkdir -p ${HOME}/Development/Vagrant/dockervm
  cp ./openbox/Vagrantfile ${HOME}/Development/Vagrant/dockervm/Vagrantfile

  echo "Installing docker shortcuts..."
  __wait_for_seconds 5
  mkdir -p ${HOME}/.local/scripts
  cp ./openbox/docker_up ${HOME}/.local/scripts/docker_up
  cp ./openbox/docker_down ${HOME}/.local/scripts/docker_down
}

__setup_user_update_script(){
  if [ "${user_can_update}" == "true" ]; then
    echo "Installing Update Scripts under ${HOME}/.local/scripts..."
    __wait_for_seconds 5

    fetch --no-verify-hostname --no-verify-peer -o /tmp/update_script.tar.gz https://api.github.com/repos/HiMyNameIsIlNano/update_script/tarball/master
    mkdir /tmp/update_script_${timestamp}
    tar xvzf /tmp/update_script.tar.gz --strip=1 -C /tmp/update_script_${timestamp}

    cd /tmp/update_script_${timestamp}
    sh install
    echo "Cleaning Temporary Files..."
    cd
    rm -rf /tmp/update_script_${timestamp}
  else
    echo "Skipping Copying Update Scripts under ${HOME}/.local/scripts as ${USER} is not member of the group installer..."
  fi
}

# TODO: if pcmanfm copy /usr/local/share/applications/mimeinfo.cache under ${HOME}/local/share/applications/mimeinfo.cache
__pcmanfm_setup(){
  # PCmanFM: Add open terminal feature
  mkdir -p ~/.local/share/file-manager/actions/
  cp ./openbox/terminal.desktop ~/.local/share/file-manager/actions/

  if [ -f "${HOME}/.local/scripts/extract" ]
  then
    echo "Backing-up extract script"
    mv ${HOME}/.local/scripts/extract ${HOME}/.local/scripts/extract.${timestamp}.bak
  fi
  cp ./openbox/extract ${HOME}/.local/scripts/extract
}

work_dir=.
config_file=${work_dir}/freebsd_configurer.config

while [ "$1" != "" ]; do
    case $1 in
	    -c | --config )		    shift
                                config_file=$1
                                echo ${config_file}
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

# Variable Declaration
user_can_update=$(__is_user_allowed_to_update)
is_docker_enabled=$(__read_property enable_docker)
is_setup_vpn_enabled=$(__read_property setup_vpn)
geany_tag_base_url=http://download.geany.org/contrib/tags
geany_java_tag_version=openjdk8-8u66-b01.java.tags
timestamp=$(date +%s)

echo "Start configuring Openbox Desktop Look & Feel..."

__pcmanfm_setup

__xsession_setup

__shell_setup

__shell_prompt_setup

__openbox_setup

__task_bar_setup

__conky_setup

__download_icons_theme

__gtk_theme_setup

__geany_setup

__docker_setup

__setup_user_update_script
		
exit 0