#!/bin/sh

# Begin Functions
__init_ports() {
	local max_size="$1"
	local timestamp=$(date +%s)
	
	echo "Initializing ports..."
	__wait_for_seconds 5

	if [ -d /usr/ports ]
	then
	    portsnap update
    else
        portsnap fetch
        portsnap extract
	fi

	__install_ports ccache

    if [ -f /etc/make.conf ]
    then
        echo "Backing-up /etc/make.conf"
        cp /etc/make.conf /etc/make.conf.${timestamp}.bak
    else
        touch /etc/make.conf
    fi

    __check_if_key_in_file WRKDIRPREFIX /etc/make.conf
    if [ $? -eq 0 ]
    then
        echo "WRKDIRPREFIX=/ram" >> /etc/make.conf
    else
        echo "Key WRKDIRPREFIX not found in /etc/make.conf"
    fi

	__check_if_key_in_file CCACHE_DIR /etc/make.conf
	if [ $? -eq 0 ]
    then
	    echo "CCACHE_DIR=/var/cache/ccache" >> /etc/make.conf
    else
        echo "Key CCACHE_DIR not found in /etc/make.conf"
	fi

	__check_if_key_in_file WITH_CCACHE_BUILD /etc/make.conf
	if [ $? -eq 0 ]
    then
	    echo "WITH_CCACHE_BUILD=yes" >> /etc/make.conf
    else
        echo "Key WITH_CCACHE_BUILD not found in /etc/make.conf"
	fi

	mkdir -p /ram
	__check_if_key_in_file /ram /etc/fstab
	if [ $? -eq 0 ]
    then
	    echo 'tmpfs /ram tmpfs rw 0 0' >> /etc/fstab
    fi
	mount /ram

	mkdir -p ~/.ccache
	__check_if_key_in_file max_size ~/.ccache/ccache.conf
	if [ $? -eq 0 ]
    then
	    echo "max_size = ${max_size}" >> ~/.ccache/ccache.conf
	fi

	__check_if_key_in_file cache_dir ~/.ccache/ccache.conf
    if [ $? -eq 0 ]
    then
	    echo "cache_dir = /var/cache/ccache" >> ~/.ccache/ccache.conf
    fi

    return 0
}

__check_if_key_in_file() {
    local key="$1"
    local file="$2"

    if [ -f ${file} ]
    then
        if grep -Fxq "${key}" ${file}
        then
            return 0
        else
            return 1
        fi
    fi

    return 0
}

# TODO: NOT USED YET
__add_key_to_file() {
    local key="$1"
    local file="$2"
    local cmd="$3"

    __check_if_key_in_file ${key} ${file}
    if [ $? -eq 0 ]
    then
        echo "${cmd}" >> ${file}
    fi
}

__wait_for_seconds(){
	local seconds="$@"
	echo "waiting ${seconds} seconds before continuing..."
	sleep ${seconds}
}

__read_property(){
	input="$@"
	temp=`cat ${config_file} | sed 's/\"//g' | grep -w $input | cut -d ":" -f2`
	echo ${temp##*|}
}

__get_port_dir() {
	local port_name="$1"
	local port_dir=$(whereis -q ${port_name})
	echo ${port_dir##*|}
}

__check_if_port_installed() {
    local port="$1"

    if ! pkg info ${port} > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

__install_ports(){
	local ports_to_install="$@"
	# The list of ports must be comma separated with no empty space
	for port in $(echo ${ports_to_install} | sed "s/,/ /g")
	do
	    __check_if_port_installed ${port}
	    if [ $? -eq 0 ]
	    then
	    	local port_dir=$(__get_port_dir $port)
		    cd ${port_dir} && make install clean BATCH=yes
        else
            echo "${port} already installed on the system"
	    fi
	done	
}

__post_config_java(){
    local java_port_name="$1"
	__check_if_port_installed ${java_port_name}

	if [ $? -eq 1 ] ; then
		__check_if_key_in_file /dev/fd /etc/fstab
        if [ $? -eq 0 ]
        then
		    echo "fdesc	/dev/fd		fdescfs		rw	0	0" >> /etc/fstab
		fi

        __check_if_key_in_file /proc /etc/fstab
		if [ $? -eq 0 ]
        then
		    echo "proc	/proc		procfs		rw	0	0" >> /etc/fstab
        fi
	else
		echo "${java_port_name} is not installed on the system"
	fi
}
# End Functions

work_dir=.
config_file=${work_dir}/post_install.config

while [ "$1" != "" ]; do
    case $1 in
	    -c | --config )		    shift
                                config_file=$1
                                echo ${config_file}
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

# Variable Declaration
base_ports=$(__read_property base_ports)
desktop_ports=$(__read_property desktop_ports)
dev_ports=$(__read_property dev_ports)
office_ports=$(__read_property office_ports)
is_docker_enabled=$(__read_property enable_docker)
is_setup_vpn_enabled=$(__read_property setup_vpn)
ccache_size=$(__read_property ccache_size)

# Init Ports tree and Ramdisk for faster compilation
__init_ports ${ccache_size}

echo "Initializing Ports Tree..."
echo "Installing ports..."
__wait_for_seconds 5
__install_ports ${base_ports}

echo "Installing desktop ports..."
__wait_for_seconds 5
__install_ports ${desktop_ports}

echo "Installing office ports..."
__wait_for_seconds 5
__install_ports ${office_ports}

echo "Installing development ports..."
__wait_for_seconds 5
__install_ports ${dev_ports}

# Finalize Java8 Configuration
__post_config_java openjdk8

if [ "${is_docker_enabled}" == "true" ]
then
	echo "Installing docker packages..."
	__wait_for_seconds 5

	docker_ports=virtualbox-ose-nox11,vagrant,docker-machine,docker
	__install_ports $docker_ports
fi

if [ "${is_setup_vpn_enabled}" == "true" ]
then
	echo "Installing openvpn packages..."
	__wait_for_seconds 5

	openvpn_ports=openvpn,curl,sudo
	__install_ports $openvpn_ports
fi

exit 0
