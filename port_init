#!/bin/sh

# Begin Functions
__init_ports() {
	local max_size="$1"
	local timestamp=$(date +%s)
	
	echo "Initializing ports..."
	__wait_for_seconds 5

	if [ -d /usr/ports ]
	then
	    portsnap update
    else
        portsnap fetch
        portsnap extract
	fi

	__install_ports ccache

    if [ -f /etc/make.conf ]
    then
        echo "Backing-up /etc/make.conf"
        cp /etc/make.conf /etc/make.conf.${timestamp}.bak
    fi

    __check_if_key_in_file WRKDIRPREFIX /etc/make.conf
    then
        echo "WRKDIRPREFIX=/ram" >> /etc/make.conf
    fi

	__check_if_key_in_file CCACHE_DIR /etc/make.conf
	if [ $? -eq 0 ]
    then
	    echo "CCACHE_DIR=/var/cache/ccache" >> /etc/make.conf
	fi

	__check_if_key_in_file WITH_CCACHE_BUILD /etc/make.conf
	if [ $? -eq 0 ]
    then
	    echo "WITH_CCACHE_BUILD=yes" >> /etc/make.conf
	fi

	mkdir -p /ram
	__check_if_key_in_file /ram /etc/fstab
	if [ $? -eq 0 ]
    then
	    echo 'tmpfs /ram tmpfs rw 0 0' >> /etc/fstab
    fi
	mount /ram

	mkdir -p ~/.ccache
	__check_if_key_in_file max_size ~/.ccache/ccache.conf
	if [ $? -eq 0 ]
    then
	    echo "max_size = ${max_size}" >> ~/.ccache/ccache.conf
	fi

	__check_if_key_in_file cache_dir ~/.ccache/ccache.conf
    if [ $? -eq 0 ]
    then
	    echo "cache_dir = /var/cache/ccache" >> ~/.ccache/ccache.conf
    fi
}
	
__is_installed(){
	if ! [ -x "$(command -v $1)" ]; then
	    echo "Error: $1 is not installed." >&2
        return 1
    else
        return 0
	fi
}

__check_if_key_in_file() {
    local key="$1"
    local file="$2"

    if [ -f ${file} ]
    then
        if grep -Fxq "${key}" ${file}
        then
            return 0
        else
            return 1
        fi
    fi

    return 0
}

# TODO: NOT USED YET
__add_key_to_file() {
    local key="$1"
    local file="$2"
    local cmd="$3"

    __check_if_key_in_file ${key} ${file}
    if [ $? -eq 0 ]
    then
        echo "${cmd}" >> ${file}
    fi
}

__check_requirements(){
	# Check if git is installed
	__is_installed git
	if [ $? -eq 1 ]
	then
        printf "Do you want to install git? [Y/n]: "
		read dummy
		if [ "${dummy}" == "Y" ]
		then
		    __install_ports git
		else
		    exit 1
		fi
	fi
}

__wait_for_seconds(){
	local seconds="$@"
	echo "waiting ${seconds} seconds before continuing..."
	sleep ${seconds}
}

__read_property(){
	input="$@"
	temp=`cat ${config_file} | sed 's/\"//g' | grep -w $input | cut -d ":" -f2`
	echo ${temp##*|}
}

__get_port_dir() {
	local port_name="$1"
	local port_dir=$(whereis -q ${port_name})
	echo ${port_dir##*|}
}

__install_ports(){
	local ports_to_install="$@"
	# The list of ports must be comma separated with no empty space
	for port in $(echo ${ports_to_install} | sed "s/,/ /g")
	do
		local port_dir=$(__get_port_dir $port)
		cd ${port_dir} && make install clean BATCH=yes
	done	
}

__is_installed_java(){
	java_version="$@"

	echo "Checking if java is installed..."
	if ! [ -x "$(command -v java)" ]; then
	  echo "Error: $1 is not installed." >&2
	  return 1
    else
		# Check if Java Version is 1.8
		version=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | awk -F. '{printf("%03d%03d",$1,$2);}')
		if [ $version == ${java_version} ] ; then
			return 0
		else
			echo "Java Version ${java_version} is not installed"
			return 1
		fi
	fi
}

__post_config_java8(){
	__is_installed_java 001008

	if [ $? -eq 0 ] ; then
		__check_if_key_in_file /dev/fd /etc/fstab
        if [ $? -eq 0 ]
        then
		    echo "fdesc	/dev/fd		fdescfs		rw	0	0" >> /etc/fstab
		fi

        __check_if_key_in_file /proc /etc/fstab
		if [ $? -eq 0 ]
        then
		    echo "proc	/proc		procfs		rw	0	0" >> /etc/fstab
        fi
	else
		echo "Java Version is not 1.8"
	fi
}
# End Functions

work_dir=.
config_file=${work_dir}/post_install.config

while [ "$1" != "" ]; do
    case $1 in
	-c | --config )		shift
                                config_file=$1
                                echo ${config_file}
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

# Variable Declaration
base_ports=$(__read_property base_ports)
desktop_ports=$(__read_property desktop_ports)
dev_ports=$(__read_property dev_ports)
office_ports=$(__read_property office_ports)
ccache_size=$(__read_property ccache_size)

# Init Ports tree and Ramdisk for faster compilation
__init_ports ${ccache_size}

echo "Initializing Ports Tree..."
echo "Installing ports..."
__wait_for_seconds 5
__install_ports ${base_ports}

echo "Installing desktop ports..."
__wait_for_seconds 5
__install_ports ${desktop_ports}

echo "Installing office ports..."
__wait_for_seconds 5
__install_ports ${office_ports}

echo "Installing development ports..."
__wait_for_seconds 5
__install_ports ${dev_ports}

# Finalize Java8 Configuration
__post_config_java8

exit 0
